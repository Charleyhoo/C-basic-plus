// O(N)

decimal Factorial(int n)
{  if (n == 0) return 1;
   else        return n * Factorial(n - 1);
}

/*
这个代码实现了计算阶乘的递归函数。阶乘函数 `Factorial(n)` 的定义是 `n! = n * (n - 1)!`，其中 `0! = 1`。

该递归函数的执行过程如下：

- 当 `n` 等于 `0` 时，函数返回 `1`。
- 否则，函数返回 `n * Factorial(n - 1)`。

这里，函数为每一个从 `n` 到 `1` 的整数调用一次自身。
每次函数调用都会在调用栈上创建一个新的栈帧，直到 `n` 等于 `0` 时为止。由于 `n` 在每次递归调用时都会减 `1`，所以一共会有 `n` 次函数调用，因此，该递归函数的时间复杂度是 `O(n)`。

在这个实现中，每一层递归都会执行一次乘法运算，而递归的深度（函数调用的次数）是 `n`，所以总共有 `n` 次乘法运算，从而得出该实现的时间复杂度是 `O(n)`。
*/